/////////////
// PLUGINS //
/////////////

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "java-library"
    id "maven-publish"
    id "signing"
    id "jacoco"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
    id "io.gitlab.arturbosch.detekt" version "1.7.4"
    id "com.github.ben-manes.versions" version "0.28.0"
}

//////////////////
// DEPENDENCIES //
//////////////////

repositories {
    mavenCentral()
}

ext {
    kodeinVersion = "6.5.5"
    slf4jVersion = "1.7.30"
}

dependencies {
    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // KODEIN
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodeinVersion"

    // LOGGING
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    // TESTING
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.1"
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
}

/////////////
// UPDATES //
/////////////

def isNonStable = { String version ->
    def regex = /^[0-9,.v-]+((-r)|(release)|(final)|(ga))?$/
    return !(version.toLowerCase() ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

/////////////
// COMPILE //
/////////////

targetCompatibility = 1.8
sourceCompatibility = targetCompatibility

def compilerArgs = [
        "-Xjsr305=strict"
]

compileKotlin {
    dependsOn ktlintFormat
    kotlinOptions {
        freeCompilerArgs += compilerArgs
        jvmTarget = "$targetCompatibility"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs += compilerArgs
        jvmTarget = "$targetCompatibility"
    }
}

//////////
// TEST //
//////////

ktlint {
    version = "0.36.0"
    verbose = true
}

detekt {
    config = files("detekt.yml")
    buildUponDefaultConfig = true
}

test {
    useJUnitPlatform {
        excludeTags project.hasProperty("fast") ? "Slow" : "None"
    }
}

jacoco {
    toolVersion = "0.8.4"
}

if (!project.hasProperty("fast")) test.finalizedBy(jacocoTestReport)

/////////////
// PUBLISH //
/////////////
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = projectName
            version = project.version
            from components.java

            pom {
                name = "Kodein Application"
                description = "Set of functions to create applications based on Kodein container"
                url = "https://github.com/Koriit/kodein-application"
                licenses {
                    license {
                        name = "The MIT License"
                        url = "https://github.com/Koriit/kodein-application/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = 'koriit'
                        name = 'Aleksander Stelmaczonek'
                        email = 'al.stelmaczonek@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Koriit/kodein-application.git'
                    developerConnection = 'scm:git:ssh://github.com/Koriit/kodein-application.git'
                    url = 'https://github.com/Koriit/kodein-application'
            }
        }
    }
}

    repositories {
        maven {
            credentials {
                username = findProperty("sonatype.user") ?: System.getenv("SONATYPE_USERNAME")
                password = findProperty("sonatype.password")?: System.getenv("SONATYPE_PASSWORD")
            }

            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("signing.key") ?: System.getenv("PGP_SIGNING_KEY")
    def signingPassword = findProperty("signing.password") ?: System.getenv("PGP_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


///////////
// OTHER //
///////////

task getVersion {
    doLast {
        print project.version
    }
}

task fmt {
    dependsOn ktlintFormat
}
